# -*- coding: utf-8 -*-
"""Capstone Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mo4ufOuOih_8Xb5DJkIPe0hAoFcD6chm
"""

#Upload data csv
from google.colab import files
uploaded = files.upload()

for filename in uploaded.keys():
    print(f'File "{filename}" berhasil diunggah.')

#Melihat 5 data teratas
import pandas as pd
df = pd.read_csv("hepatitis.csv", sep=';', header=None, na_values='?')
print(df.head())

#Membuat header kolom yang sesuai dengan deskripsi yang ada di deskripsi
column_names = ["CLASS", "AGE", "SEX", "STEROID", "ANTIVIRALS", "FATIGUE",
                "MALAISE", "ANOREXIA", "LIVER BIG", "LIVER FIRM",
                "SPLEEN PALPABLE", "SPIDERS", "ASCITES", "VARICES",
                "BILIRUBIN", "ALK PHOSPHATE", "SGOT", "ALBUMIN",
                "PROTIME", "HISTOLOGY"]
df.columns = column_names
print(df.head())

#Mengatasi missing value kolom kategori
fitur_numerik = ["AGE","BILIRUBIN","ALK PHOSPHATE", "SGOT","ALBUMIN","PROTIME"]
print("Jumlah nilai non-null sebelum imputasi untuk fitur numerik:")
print(df[fitur_numerik].info())

#Inisialisasi imputasi dengan median
from sklearn.impute import SimpleImputer

median_imputer = SimpleImputer(strategy='median')

#fit transform digunakan untuk menghitung median dan memasukannya pada missing value
df[fitur_numerik] = median_imputer.fit_transform(df[fitur_numerik])

print(df[fitur_numerik].info())

#imputasi fitur kategorikal
fitur_binary = ['SEX', 'STEROID', 'ANTIVIRALS', 'FATIGUE', 'MALAISE', 'ANOREXIA', 'LIVER BIG', 'LIVER FIRM', 'SPLEEN PALPABLE', 'SPIDERS', 'ASCITES', 'VARICES', 'HISTOLOGY']

for i in fitur_binary:
    df[i] =  df[i].replace({1.0:0.0, 2.0:1.0})

df["CLASS"] = df["CLASS"].replace({1:0,2:1})

#memanggil fungsi untuk modus imputer
modus_imputer = SimpleImputer(strategy='most_frequent')

#menentukan nilai modus dan memasukannya ke missing value
df[fitur_binary] = modus_imputer.fit_transform(df[fitur_binary])

df.info()

#Pisahkan antara fitur dan target
y = df["CLASS"]
X = df.drop("CLASS", axis=1)

print(y.shape)
print(X.shape)

#Membagi data menjadi 70% pelatihan dan 30% Test
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42, stratify=y)

print("Bentuk (shape) dari set pelatihan:")
print(f"Bentuk X_train: {X_train.shape}")
print(f"Bentuk y_train: {y_train.shape}")
print("\nBentuk (shape) dari set pengujian:")
print(f"Bentuk X_test: {X_test.shape}")
print(f"Bentuk y_test: {y_test.shape}")

# Melatih Model Random Forest
from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(n_estimators=100,random_state=42,)
# Latih model dengan data training
print("Melatih model Random Forest...")
rf_model.fit(X_train, y_train)
print("Model selesai dilatih!")

#Mengevaluasi Model
from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay
import matplotlib.pyplot as plt



#Membuat prediksi pada data uji
y_pred = rf_model.predict(X_test)

#Hitung akurasi
akurasi = accuracy_score(y_test,y_pred)
print(f"Akurasi Model: {akurasi:.2f}")

#Tampilkan laporan klasifikasi (Precision, Recall, F1-score)
print("\nLaporan Klasifikasi:")
print(classification_report(y_test,y_pred, target_names=['DIE','LIVE']))

#Tampilkan confussion matrix
print("\nConfusion Matrix:")

ConfusionMatrixDisplay.from_predictions(
    y_test,
    y_pred,
    cmap='Greens'  )

plt.title('Confusion Matrix via ConfusionMatrixDisplay')
plt.show()

pip install imbalanced-learn

#Library untuk memanggil model SMOTE
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

#Inisialisasi smote
smote = SMOTE(random_state=42)

print("Jumlah sampel per kelas SEBELUM SMOTE:")
print(y_train.value_counts())

X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
print("\nJumlah sampel perkelas setelah SMOTE:")
print(y_train_resampled.value_counts())

# Latih model Random Forest BARU dengan data yang sudah melakukan SMOTE
rf_model_smote = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model_smote.fit(X_train_resampled, y_train_resampled)

y_pred_smote = rf_model_smote.predict(X_test)

print("\nHasil Evaluasi Setelah Menggunakan SMOTE")
print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred_smote, target_names=['DIE', 'LIVE']))

print("\nConfusion Matrix:")

ConfusionMatrixDisplay.from_predictions(
    y_test,
    y_pred_smote,
    display_labels=None,
    cmap='Greens'  )

plt.title('Confusion Matrix via ConfusionMatrixDisplay')
plt.show()